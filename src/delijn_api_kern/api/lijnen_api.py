"""
    De Lijn Kern Open Data Services (v1)

    Dit document beschrijft de kern operaties van de Open Data API (v1)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from delijn_api_kern.api_client import ApiClient, Endpoint as _Endpoint
from delijn_api_kern.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from delijn_api_kern.model.gemeenten import Gemeenten
from delijn_api_kern.model.haltes import Haltes
from delijn_api_kern.model.lijn import Lijn
from delijn_api_kern.model.lijn_lijnrichtingen_lijst import LijnLijnrichtingenLijst
from delijn_api_kern.model.lijnen import Lijnen
from delijn_api_kern.model.lijnkleur_codes import LijnkleurCodes
from delijn_api_kern.model.lijnrichting import Lijnrichting
from delijn_api_kern.model.lijnrichtingen import Lijnrichtingen
from delijn_api_kern.model.omleidingen import Omleidingen
from delijn_api_kern.model.ritten import Ritten


class LijnenApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.geef_dienstregeling_voor_lijnrichting_endpoint = _Endpoint(
            settings={
                'response_type': (Ritten,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen/{richting}/dienstregelingen',
                'operation_id': 'geef_dienstregeling_voor_lijnrichting',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'lijnnummer',
                    'richting',
                    'datum',
                ],
                'required': [
                    'entiteitnummer',
                    'lijnnummer',
                    'richting',
                ],
                'nullable': [
                ],
                'enum': [
                    'richting',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('richting',): {

                        "HEEN": "HEEN",
                        "TERUG": "TERUG"
                    },
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'lijnnummer':
                        (int,),
                    'richting':
                        (str,),
                    'datum':
                        (str,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'lijnnummer': 'lijnnummer',
                    'richting': 'richting',
                    'datum': 'datum',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'lijnnummer': 'path',
                    'richting': 'path',
                    'datum': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_doorkomst_voor_lijnrichting_endpoint = _Endpoint(
            settings={
                'response_type': (Ritten,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen/{richting}/real-time',
                'operation_id': 'geef_doorkomst_voor_lijnrichting',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'lijnnummer',
                    'richting',
                ],
                'required': [
                    'entiteitnummer',
                    'lijnnummer',
                    'richting',
                ],
                'nullable': [
                ],
                'enum': [
                    'richting',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('richting',): {

                        "HEEN": "HEEN",
                        "TERUG": "TERUG"
                    },
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'lijnnummer':
                        (int,),
                    'richting':
                        (str,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'lijnnummer': 'lijnnummer',
                    'richting': 'richting',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'lijnnummer': 'path',
                    'richting': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_gemeenten_voor_lijn_endpoint = _Endpoint(
            settings={
                'response_type': (Gemeenten,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/{entiteitnummer}/{lijnnummer}/gemeenten',
                'operation_id': 'geef_gemeenten_voor_lijn',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'lijnnummer',
                ],
                'required': [
                    'entiteitnummer',
                    'lijnnummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'lijnnummer':
                        (int,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'lijnnummer': 'lijnnummer',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'lijnnummer': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_geplande_storingen_voor_lijnrichting_endpoint = _Endpoint(
            settings={
                'response_type': (Omleidingen,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen/{richting}/omleidingen',
                'operation_id': 'geef_geplande_storingen_voor_lijnrichting',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'lijnnummer',
                    'richting',
                    'datum',
                ],
                'required': [
                    'entiteitnummer',
                    'lijnnummer',
                    'richting',
                ],
                'nullable': [
                ],
                'enum': [
                    'richting',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('richting',): {

                        "HEEN": "HEEN",
                        "TERUG": "TERUG"
                    },
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'lijnnummer':
                        (int,),
                    'richting':
                        (str,),
                    'datum':
                        (str,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'lijnnummer': 'lijnnummer',
                    'richting': 'richting',
                    'datum': 'datum',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'lijnnummer': 'path',
                    'richting': 'path',
                    'datum': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_geplande_storingen_voor_lijnrichtingen_lijst_endpoint = _Endpoint(
            settings={
                'response_type': (Omleidingen,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/lijst/{lijnrichtingsleutels}/omleidingen',
                'operation_id': 'geef_geplande_storingen_voor_lijnrichtingen_lijst',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'lijnrichtingsleutels',
                    'datum',
                ],
                'required': [
                    'lijnrichtingsleutels',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lijnrichtingsleutels':
                        (str,),
                    'datum':
                        (str,),
                },
                'attribute_map': {
                    'lijnrichtingsleutels': 'lijnrichtingsleutels',
                    'datum': 'datum',
                },
                'location_map': {
                    'lijnrichtingsleutels': 'path',
                    'datum': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_haltes_voor_lijnrichting_endpoint = _Endpoint(
            settings={
                'response_type': (Haltes,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen/{richting}/haltes',
                'operation_id': 'geef_haltes_voor_lijnrichting',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'lijnnummer',
                    'richting',
                ],
                'required': [
                    'entiteitnummer',
                    'lijnnummer',
                    'richting',
                ],
                'nullable': [
                ],
                'enum': [
                    'richting',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('richting',): {

                        "HEEN": "HEEN",
                        "TERUG": "TERUG"
                    },
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'lijnnummer':
                        (int,),
                    'richting':
                        (str,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'lijnnummer': 'lijnnummer',
                    'richting': 'richting',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'lijnnummer': 'path',
                    'richting': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_lijn_endpoint = _Endpoint(
            settings={
                'response_type': (Lijn,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/{entiteitnummer}/{lijnnummer}',
                'operation_id': 'geef_lijn',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'lijnnummer',
                ],
                'required': [
                    'entiteitnummer',
                    'lijnnummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'lijnnummer':
                        (int,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'lijnnummer': 'lijnnummer',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'lijnnummer': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_lijn_lijst_endpoint = _Endpoint(
            settings={
                'response_type': (Lijnen,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/lijst/{lijnsleutels}',
                'operation_id': 'geef_lijn_lijst',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'lijnsleutels',
                ],
                'required': [
                    'lijnsleutels',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lijnsleutels':
                        (str,),
                },
                'attribute_map': {
                    'lijnsleutels': 'lijnsleutels',
                },
                'location_map': {
                    'lijnsleutels': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_lijnen_endpoint = _Endpoint(
            settings={
                'response_type': (Lijnen,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen',
                'operation_id': 'geef_lijnen',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_lijnkleur_endpoint = _Endpoint(
            settings={
                'response_type': (LijnkleurCodes,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/{entiteitnummer}/{lijnnummer}/lijnkleuren',
                'operation_id': 'geef_lijnkleur',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'lijnnummer',
                ],
                'required': [
                    'entiteitnummer',
                    'lijnnummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'lijnnummer':
                        (int,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'lijnnummer': 'lijnnummer',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'lijnnummer': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_lijnkleur_lijst_endpoint = _Endpoint(
            settings={
                'response_type': (LijnkleurCodes,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/lijst/{lijnsleutels}/lijnkleuren',
                'operation_id': 'geef_lijnkleur_lijst',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'lijnsleutels',
                ],
                'required': [
                    'lijnsleutels',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lijnsleutels':
                        (str,),
                },
                'attribute_map': {
                    'lijnsleutels': 'lijnsleutels',
                },
                'location_map': {
                    'lijnsleutels': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_lijnrichting_endpoint = _Endpoint(
            settings={
                'response_type': (Lijnrichting,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen/{richting}',
                'operation_id': 'geef_lijnrichting',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'lijnnummer',
                    'richting',
                ],
                'required': [
                    'entiteitnummer',
                    'lijnnummer',
                    'richting',
                ],
                'nullable': [
                ],
                'enum': [
                    'richting',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('richting',): {

                        "HEEN": "HEEN",
                        "TERUG": "TERUG"
                    },
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'lijnnummer':
                        (int,),
                    'richting':
                        (str,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'lijnnummer': 'lijnnummer',
                    'richting': 'richting',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'lijnnummer': 'path',
                    'richting': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_lijnrichtingen_endpoint = _Endpoint(
            settings={
                'response_type': (Lijnrichtingen,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen',
                'operation_id': 'geef_lijnrichtingen',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'lijnnummer',
                ],
                'required': [
                    'entiteitnummer',
                    'lijnnummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'lijnnummer':
                        (int,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'lijnnummer': 'lijnnummer',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'lijnnummer': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_lijnrichtingen_lijst_endpoint = _Endpoint(
            settings={
                'response_type': (LijnLijnrichtingenLijst,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/lijst/{lijnsleutels}/lijnrichtingen',
                'operation_id': 'geef_lijnrichtingen_lijst',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'lijnsleutels',
                ],
                'required': [
                    'lijnsleutels',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lijnsleutels':
                        (str,),
                },
                'attribute_map': {
                    'lijnsleutels': 'lijnsleutels',
                },
                'location_map': {
                    'lijnsleutels': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_on_geplande_storingen_voor_lijnrichting_endpoint = _Endpoint(
            settings={
                'response_type': (Omleidingen,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen/{richting}/storingen',
                'operation_id': 'geef_on_geplande_storingen_voor_lijnrichting',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'lijnnummer',
                    'richting',
                    'datum',
                ],
                'required': [
                    'entiteitnummer',
                    'lijnnummer',
                    'richting',
                ],
                'nullable': [
                ],
                'enum': [
                    'richting',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('richting',): {

                        "HEEN": "HEEN",
                        "TERUG": "TERUG"
                    },
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'lijnnummer':
                        (int,),
                    'richting':
                        (str,),
                    'datum':
                        (str,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'lijnnummer': 'lijnnummer',
                    'richting': 'richting',
                    'datum': 'datum',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'lijnnummer': 'path',
                    'richting': 'path',
                    'datum': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_on_geplande_storingen_voor_lijnrichtingen_lijst_endpoint = _Endpoint(
            settings={
                'response_type': (Omleidingen,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/lijst/{lijnrichtingsleutels}/storingen',
                'operation_id': 'geef_on_geplande_storingen_voor_lijnrichtingen_lijst',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'lijnrichtingsleutels',
                    'datum',
                ],
                'required': [
                    'lijnrichtingsleutels',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lijnrichtingsleutels':
                        (str,),
                    'datum':
                        (str,),
                },
                'attribute_map': {
                    'lijnrichtingsleutels': 'lijnrichtingsleutels',
                    'datum': 'datum',
                },
                'location_map': {
                    'lijnrichtingsleutels': 'path',
                    'datum': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_rit_voor_lijnrichting_endpoint = _Endpoint(
            settings={
                'response_type': (Ritten,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen/{richting}/rit/{ritnummer}',
                'operation_id': 'geef_rit_voor_lijnrichting',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'lijnnummer',
                    'richting',
                    'ritnummer',
                    'datum',
                ],
                'required': [
                    'entiteitnummer',
                    'lijnnummer',
                    'richting',
                    'ritnummer',
                ],
                'nullable': [
                ],
                'enum': [
                    'richting',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('richting',): {

                        "HEEN": "HEEN",
                        "TERUG": "TERUG"
                    },
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'lijnnummer':
                        (int,),
                    'richting':
                        (str,),
                    'ritnummer':
                        (str,),
                    'datum':
                        (str,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'lijnnummer': 'lijnnummer',
                    'richting': 'richting',
                    'ritnummer': 'ritnummer',
                    'datum': 'datum',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'lijnnummer': 'path',
                    'richting': 'path',
                    'ritnummer': 'path',
                    'datum': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def geef_dienstregeling_voor_lijnrichting(
        self,
        entiteitnummer,
        lijnnummer,
        richting,
        **kwargs
    ):
        """geef de dienstregeling voor de opgegeven lijnrichting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_dienstregeling_voor_lijnrichting(entiteitnummer, lijnnummer, richting, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32. nummer van de entiteit
            lijnnummer (int): Format - int32. nummer van de lijn
            richting (str): richting van de lijn

        Keyword Args:
            datum (str): datum in formaat yyyy-MM-dd met als default waarde de huidige datum. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Ritten
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['lijnnummer'] = \
            lijnnummer
        kwargs['richting'] = \
            richting
        return self.geef_dienstregeling_voor_lijnrichting_endpoint.call_with_http_info(**kwargs)

    def geef_doorkomst_voor_lijnrichting(
        self,
        entiteitnummer,
        lijnnummer,
        richting,
        **kwargs
    ):
        """geef de real-time doorkomsten voor de opgegeven lijnrichting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_doorkomst_voor_lijnrichting(entiteitnummer, lijnnummer, richting, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32. nummer van de entiteit
            lijnnummer (int): Format - int32. nummer van de lijn
            richting (str): richting van de lijn

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Ritten
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['lijnnummer'] = \
            lijnnummer
        kwargs['richting'] = \
            richting
        return self.geef_doorkomst_voor_lijnrichting_endpoint.call_with_http_info(**kwargs)

    def geef_gemeenten_voor_lijn(
        self,
        entiteitnummer,
        lijnnummer,
        **kwargs
    ):
        """geef de gemeenten die bediend worden voor de opgegeven lijn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_gemeenten_voor_lijn(entiteitnummer, lijnnummer, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32. nummer van de entiteit
            lijnnummer (int): Format - int32. nummer van de lijn

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Gemeenten
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['lijnnummer'] = \
            lijnnummer
        return self.geef_gemeenten_voor_lijn_endpoint.call_with_http_info(**kwargs)

    def geef_geplande_storingen_voor_lijnrichting(
        self,
        entiteitnummer,
        lijnnummer,
        richting,
        **kwargs
    ):
        """geef de omleidingen voor de opgegeven lijnrichting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_geplande_storingen_voor_lijnrichting(entiteitnummer, lijnnummer, richting, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32. nummer van de entiteit
            lijnnummer (int): Format - int32. nummer van de lijn
            richting (str): richting van de lijn

        Keyword Args:
            datum (str): datum in formaat yyyy-MM-dd met als default waarde de huidige datum. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Omleidingen
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['lijnnummer'] = \
            lijnnummer
        kwargs['richting'] = \
            richting
        return self.geef_geplande_storingen_voor_lijnrichting_endpoint.call_with_http_info(**kwargs)

    def geef_geplande_storingen_voor_lijnrichtingen_lijst(
        self,
        lijnrichtingsleutels,
        **kwargs
    ):
        """geef de omleidingen voor de opgegeven lijst van lijnrichtingen  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_geplande_storingen_voor_lijnrichtingen_lijst(lijnrichtingsleutels, async_req=True)
        >>> result = thread.get()

        Args:
            lijnrichtingsleutels (str): lijst van lijnrichtingen (bv 1_500_HEEN_1_550_TERUG)

        Keyword Args:
            datum (str): datum in formaat yyyy-MM-dd met als default waarde de huidige datum. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Omleidingen
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['lijnrichtingsleutels'] = \
            lijnrichtingsleutels
        return self.geef_geplande_storingen_voor_lijnrichtingen_lijst_endpoint.call_with_http_info(**kwargs)

    def geef_haltes_voor_lijnrichting(
        self,
        entiteitnummer,
        lijnnummer,
        richting,
        **kwargs
    ):
        """geef de haltes die de door opgegeven lijnrichting worden bediend  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_haltes_voor_lijnrichting(entiteitnummer, lijnnummer, richting, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32.
            lijnnummer (int): Format - int32.
            richting (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Haltes
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['lijnnummer'] = \
            lijnnummer
        kwargs['richting'] = \
            richting
        return self.geef_haltes_voor_lijnrichting_endpoint.call_with_http_info(**kwargs)

    def geef_lijn(
        self,
        entiteitnummer,
        lijnnummer,
        **kwargs
    ):
        """geef een lijn op basis van het opgegeven lijnnummer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_lijn(entiteitnummer, lijnnummer, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32.
            lijnnummer (int): Format - int32.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Lijn
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['lijnnummer'] = \
            lijnnummer
        return self.geef_lijn_endpoint.call_with_http_info(**kwargs)

    def geef_lijn_lijst(
        self,
        lijnsleutels,
        **kwargs
    ):
        """geef een lijst van lijnen op basis van een lijst van lijn sleutels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_lijn_lijst(lijnsleutels, async_req=True)
        >>> result = thread.get()

        Args:
            lijnsleutels (str): lijst van lijn sleutels (bv 1_500_1_550)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Lijnen
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['lijnsleutels'] = \
            lijnsleutels
        return self.geef_lijn_lijst_endpoint.call_with_http_info(**kwargs)

    def geef_lijnen(
        self,
        **kwargs
    ):
        """geef alle lijnen  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_lijnen(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Lijnen
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.geef_lijnen_endpoint.call_with_http_info(**kwargs)

    def geef_lijnkleur(
        self,
        entiteitnummer,
        lijnnummer,
        **kwargs
    ):
        """geef de lijnkleuren voor het opgegeven lijnnummer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_lijnkleur(entiteitnummer, lijnnummer, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32.
            lijnnummer (int): Format - int32.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LijnkleurCodes
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['lijnnummer'] = \
            lijnnummer
        return self.geef_lijnkleur_endpoint.call_with_http_info(**kwargs)

    def geef_lijnkleur_lijst(
        self,
        lijnsleutels,
        **kwargs
    ):
        """geef de lijnkleuren van lijnen op basis van een lijst van lijn sleutels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_lijnkleur_lijst(lijnsleutels, async_req=True)
        >>> result = thread.get()

        Args:
            lijnsleutels (str): lijst van lijn sleutels (bv 1_500_1_550)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LijnkleurCodes
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['lijnsleutels'] = \
            lijnsleutels
        return self.geef_lijnkleur_lijst_endpoint.call_with_http_info(**kwargs)

    def geef_lijnrichting(
        self,
        entiteitnummer,
        lijnnummer,
        richting,
        **kwargs
    ):
        """geef een lijnrichting voor de opgegeven lijnrichtingcode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_lijnrichting(entiteitnummer, lijnnummer, richting, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32.
            lijnnummer (int): Format - int32.
            richting (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Lijnrichting
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['lijnnummer'] = \
            lijnnummer
        kwargs['richting'] = \
            richting
        return self.geef_lijnrichting_endpoint.call_with_http_info(**kwargs)

    def geef_lijnrichtingen(
        self,
        entiteitnummer,
        lijnnummer,
        **kwargs
    ):
        """geef de lijnrichtingen voor het opgegeven lijnnummer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_lijnrichtingen(entiteitnummer, lijnnummer, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32.
            lijnnummer (int): Format - int32.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Lijnrichtingen
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['lijnnummer'] = \
            lijnnummer
        return self.geef_lijnrichtingen_endpoint.call_with_http_info(**kwargs)

    def geef_lijnrichtingen_lijst(
        self,
        lijnsleutels,
        **kwargs
    ):
        """geef de lijnrichtingen van lijnen op basis van een lijst van lijn sleutels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_lijnrichtingen_lijst(lijnsleutels, async_req=True)
        >>> result = thread.get()

        Args:
            lijnsleutels (str): lijst van lijn sleutels (bv 1_500_1_550)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LijnLijnrichtingenLijst
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['lijnsleutels'] = \
            lijnsleutels
        return self.geef_lijnrichtingen_lijst_endpoint.call_with_http_info(**kwargs)

    def geef_on_geplande_storingen_voor_lijnrichting(
        self,
        entiteitnummer,
        lijnnummer,
        richting,
        **kwargs
    ):
        """geef de storingen voor de opgegeven lijnrichting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_on_geplande_storingen_voor_lijnrichting(entiteitnummer, lijnnummer, richting, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32. nummer van de entiteit
            lijnnummer (int): Format - int32. nummer van de lijn
            richting (str): richting van de lijn

        Keyword Args:
            datum (str): datum in formaat yyyy-MM-dd met als default waarde de huidige datum. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Omleidingen
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['lijnnummer'] = \
            lijnnummer
        kwargs['richting'] = \
            richting
        return self.geef_on_geplande_storingen_voor_lijnrichting_endpoint.call_with_http_info(**kwargs)

    def geef_on_geplande_storingen_voor_lijnrichtingen_lijst(
        self,
        lijnrichtingsleutels,
        **kwargs
    ):
        """geef de storingen voor de opgegeven lijst van lijnrichtingen  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_on_geplande_storingen_voor_lijnrichtingen_lijst(lijnrichtingsleutels, async_req=True)
        >>> result = thread.get()

        Args:
            lijnrichtingsleutels (str): lijst van lijnrichtingen (bv 1_500_HEEN_1_550_TERUG)

        Keyword Args:
            datum (str): datum in formaat yyyy-MM-dd met als default waarde de huidige datum. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Omleidingen
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['lijnrichtingsleutels'] = \
            lijnrichtingsleutels
        return self.geef_on_geplande_storingen_voor_lijnrichtingen_lijst_endpoint.call_with_http_info(**kwargs)

    def geef_rit_voor_lijnrichting(
        self,
        entiteitnummer,
        lijnnummer,
        richting,
        ritnummer,
        **kwargs
    ):
        """geef rit(ten) voor de opgegeven lijnrichting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_rit_voor_lijnrichting(entiteitnummer, lijnnummer, richting, ritnummer, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32. nummer van de entiteit
            lijnnummer (int): Format - int32. nummer van de lijn
            richting (str): richting van de lijn
            ritnummer (str): nummer van de rit

        Keyword Args:
            datum (str): exploitatie datum in formaat yyyy-MM-dd met huidige datum als default. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Ritten
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['lijnnummer'] = \
            lijnnummer
        kwargs['richting'] = \
            richting
        kwargs['ritnummer'] = \
            ritnummer
        return self.geef_rit_voor_lijnrichting_endpoint.call_with_http_info(**kwargs)

