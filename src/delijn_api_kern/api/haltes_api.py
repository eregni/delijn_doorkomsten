"""
    De Lijn Kern Open Data Services (v1)

    Dit document beschrijft de kern operaties van de Open Data API (v1)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from delijn_api_kern.api_client import ApiClient, Endpoint as _Endpoint
from delijn_api_kern.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from delijn_api_kern.model.halte import Halte
from delijn_api_kern.model.halte_doorkomsten_lijst import HalteDoorkomstenLijst
from delijn_api_kern.model.halte_omleidingen_lijst import HalteOmleidingenLijst
from delijn_api_kern.model.haltes import Haltes
from delijn_api_kern.model.lijnrichtingen import Lijnrichtingen
from delijn_api_kern.model.omleidingen import Omleidingen
from delijn_api_kern.model.punten import Punten
from delijn_api_kern.model.ritten import Ritten


class HaltesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.geef_dienstregeling_voor_halte_endpoint = _Endpoint(
            settings={
                'response_type': (Ritten,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/haltes/{entiteitnummer}/{haltenummer}/dienstregelingen',
                'operation_id': 'geef_dienstregeling_voor_halte',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'haltenummer',
                    'datum',
                    'inclusief_ritnummer',
                ],
                'required': [
                    'entiteitnummer',
                    'haltenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'haltenummer':
                        (int,),
                    'datum':
                        (str,),
                    'inclusief_ritnummer':
                        (bool,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'haltenummer': 'haltenummer',
                    'datum': 'datum',
                    'inclusief_ritnummer': 'inclusiefRitnummer',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'haltenummer': 'path',
                    'datum': 'query',
                    'inclusief_ritnummer': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_dienstregeling_voor_halte_lijst_endpoint = _Endpoint(
            settings={
                'response_type': (HalteDoorkomstenLijst,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/haltes/lijst/{haltesleutels}/dienstregelingen',
                'operation_id': 'geef_dienstregeling_voor_halte_lijst',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'haltesleutels',
                    'datum',
                    'inclusief_ritnummer',
                ],
                'required': [
                    'haltesleutels',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'haltesleutels':
                        (str,),
                    'datum':
                        (str,),
                    'inclusief_ritnummer':
                        (bool,),
                },
                'attribute_map': {
                    'haltesleutels': 'haltesleutels',
                    'datum': 'datum',
                    'inclusief_ritnummer': 'inclusiefRitnummer',
                },
                'location_map': {
                    'haltesleutels': 'path',
                    'datum': 'query',
                    'inclusief_ritnummer': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_doorkomsten_voor_halte_endpoint = _Endpoint(
            settings={
                'response_type': (Ritten,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/haltes/{entiteitnummer}/{haltenummer}/real-time',
                'operation_id': 'geef_doorkomsten_voor_halte',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'haltenummer',
                    'max_aantal_doorkomsten',
                    'ocp_apim_subscription_key',
                ],
                'required': [
                    'entiteitnummer',
                    'haltenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'haltenummer':
                        (int,),
                    'max_aantal_doorkomsten':
                        (int,),
                    'ocp_apim_subscription_key':
                        (str,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'haltenummer': 'haltenummer',
                    'max_aantal_doorkomsten': 'maxAantalDoorkomsten',
                    'ocp_apim_subscription_key': 'Ocp-Apim-Subscription-Key',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'haltenummer': 'path',
                    'max_aantal_doorkomsten': 'query',
                    'ocp_apim_subscription_key': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_doorkomsten_voor_halte_lijst_endpoint = _Endpoint(
            settings={
                'response_type': (HalteDoorkomstenLijst,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/haltes/lijst/{haltesleutels}/real-time',
                'operation_id': 'geef_doorkomsten_voor_halte_lijst',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'haltesleutels',
                    'max_aantal_doorkomsten',
                ],
                'required': [
                    'haltesleutels',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'haltesleutels':
                        (str,),
                    'max_aantal_doorkomsten':
                        (int,),
                },
                'attribute_map': {
                    'haltesleutels': 'haltesleutels',
                    'max_aantal_doorkomsten': 'maxAantalDoorkomsten',
                },
                'location_map': {
                    'haltesleutels': 'path',
                    'max_aantal_doorkomsten': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_halte_endpoint = _Endpoint(
            settings={
                'response_type': (Halte,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/haltes/{entiteitnummer}/{haltenummer}',
                'operation_id': 'geef_halte',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'haltenummer',
                ],
                'required': [
                    'entiteitnummer',
                    'haltenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'haltenummer':
                        (int,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'haltenummer': 'haltenummer',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'haltenummer': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_halte_lijnrichtingen_lijst_endpoint = _Endpoint(
            settings={
                'response_type': (Lijnrichtingen,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/haltes/lijst/{haltesleutels}/lijnrichtingen',
                'operation_id': 'geef_halte_lijnrichtingen_lijst',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'haltesleutels',
                ],
                'required': [
                    'haltesleutels',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'haltesleutels':
                        (str,),
                },
                'attribute_map': {
                    'haltesleutels': 'haltesleutels',
                },
                'location_map': {
                    'haltesleutels': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_halte_lijst_endpoint = _Endpoint(
            settings={
                'response_type': (Haltes,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/haltes/lijst/{haltesleutels}',
                'operation_id': 'geef_halte_lijst',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'haltesleutels',
                ],
                'required': [
                    'haltesleutels',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'haltesleutels':
                        (str,),
                },
                'attribute_map': {
                    'haltesleutels': 'haltesleutels',
                },
                'location_map': {
                    'haltesleutels': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_haltes_endpoint = _Endpoint(
            settings={
                'response_type': (Haltes,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/haltes',
                'operation_id': 'geef_haltes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_haltes_indebuurt_endpoint = _Endpoint(
            settings={
                'response_type': (Punten,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/haltes/indebuurt/{latlng}',
                'operation_id': 'geef_haltes_indebuurt',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'latlng',
                    'radius',
                    'max_aantal_haltes',
                ],
                'required': [
                    'latlng',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'latlng':
                        (str,),
                    'radius':
                        (int,),
                    'max_aantal_haltes':
                        (int,),
                },
                'attribute_map': {
                    'latlng': 'latlng',
                    'radius': 'radius',
                    'max_aantal_haltes': 'maxAantalHaltes',
                },
                'location_map': {
                    'latlng': 'path',
                    'radius': 'query',
                    'max_aantal_haltes': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_lijnrichtingen_voor_halte_endpoint = _Endpoint(
            settings={
                'response_type': (Lijnrichtingen,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/haltes/{entiteitnummer}/{haltenummer}/lijnrichtingen',
                'operation_id': 'geef_lijnrichtingen_voor_halte',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'haltenummer',
                ],
                'required': [
                    'entiteitnummer',
                    'haltenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'haltenummer':
                        (int,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'haltenummer': 'haltenummer',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'haltenummer': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_omleidingen_voor_halte_endpoint = _Endpoint(
            settings={
                'response_type': (Omleidingen,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/haltes/{entiteitnummer}/{haltenummer}/omleidingen',
                'operation_id': 'geef_omleidingen_voor_halte',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'haltenummer',
                    'datum',
                ],
                'required': [
                    'entiteitnummer',
                    'haltenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'haltenummer':
                        (int,),
                    'datum':
                        (str,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'haltenummer': 'haltenummer',
                    'datum': 'datum',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'haltenummer': 'path',
                    'datum': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_omleidingen_voor_halte_lijst_endpoint = _Endpoint(
            settings={
                'response_type': (HalteOmleidingenLijst,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/haltes/lijst/{haltesleutels}/omleidingen',
                'operation_id': 'geef_omleidingen_voor_halte_lijst',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'haltesleutels',
                    'datum',
                ],
                'required': [
                    'haltesleutels',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'haltesleutels':
                        (str,),
                    'datum':
                        (str,),
                },
                'attribute_map': {
                    'haltesleutels': 'haltesleutels',
                    'datum': 'datum',
                },
                'location_map': {
                    'haltesleutels': 'path',
                    'datum': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_storingen_voor_halte_endpoint = _Endpoint(
            settings={
                'response_type': (Omleidingen,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/haltes/{entiteitnummer}/{haltenummer}/storingen',
                'operation_id': 'geef_storingen_voor_halte',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entiteitnummer',
                    'haltenummer',
                    'datum',
                ],
                'required': [
                    'entiteitnummer',
                    'haltenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entiteitnummer':
                        (int,),
                    'haltenummer':
                        (int,),
                    'datum':
                        (str,),
                },
                'attribute_map': {
                    'entiteitnummer': 'entiteitnummer',
                    'haltenummer': 'haltenummer',
                    'datum': 'datum',
                },
                'location_map': {
                    'entiteitnummer': 'path',
                    'haltenummer': 'path',
                    'datum': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_storingen_voor_halte_lijst_endpoint = _Endpoint(
            settings={
                'response_type': (Omleidingen,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/haltes/lijst/{haltesleutels}/storingen',
                'operation_id': 'geef_storingen_voor_halte_lijst',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'haltesleutels',
                    'datum',
                ],
                'required': [
                    'haltesleutels',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'haltesleutels':
                        (str,),
                    'datum':
                        (str,),
                },
                'attribute_map': {
                    'haltesleutels': 'haltesleutels',
                    'datum': 'datum',
                },
                'location_map': {
                    'haltesleutels': 'path',
                    'datum': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def geef_dienstregeling_voor_halte(
        self,
        entiteitnummer,
        haltenummer,
        **kwargs
    ):
        """geef de dienstregeling voor de opgegeven halte  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_dienstregeling_voor_halte(entiteitnummer, haltenummer, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32. nummer van de entiteit
            haltenummer (int): Format - int32. nummer van de halte

        Keyword Args:
            datum (str): datum in formaat yyyy-MM-dd met als default waarde de huidige datum. [optional]
            inclusief_ritnummer (bool): het ritnummer is gewenst in het resultaat (performance impact). [optional] if omitted the server will use the default value of True
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Ritten
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['haltenummer'] = \
            haltenummer
        return self.geef_dienstregeling_voor_halte_endpoint.call_with_http_info(**kwargs)

    def geef_dienstregeling_voor_halte_lijst(
        self,
        haltesleutels,
        **kwargs
    ):
        """geef de dienstregeling voor de opgegeven halte sleutels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_dienstregeling_voor_halte_lijst(haltesleutels, async_req=True)
        >>> result = thread.get()

        Args:
            haltesleutels (str): lijst van halte sleutels (bv 1_201302_5_5024541)

        Keyword Args:
            datum (str): datum in formaat yyyy-MM-dd met als default waarde de huidige datum. [optional]
            inclusief_ritnummer (bool): het ritnummer is gewenst in het resultaat (performance impact). [optional] if omitted the server will use the default value of True
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            HalteDoorkomstenLijst
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['haltesleutels'] = \
            haltesleutels
        return self.geef_dienstregeling_voor_halte_lijst_endpoint.call_with_http_info(**kwargs)

    def geef_doorkomsten_voor_halte(
        self,
        entiteitnummer,
        haltenummer,
        **kwargs
    ):
        """geef de real-time doorkomsten voor de opgegeven halte  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_doorkomsten_voor_halte(entiteitnummer, haltenummer, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32. nummer van de entiteit
            haltenummer (int): Format - int32. nummer van de halte

        Keyword Args:
            max_aantal_doorkomsten (int): Format - int32. maximaal aantal doorkomsten voor de opgegeven halte. [optional] if omitted the server will use the default value of 10
            ocp_apim_subscription_key (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Ritten
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['haltenummer'] = \
            haltenummer
        return self.geef_doorkomsten_voor_halte_endpoint.call_with_http_info(**kwargs)

    def geef_doorkomsten_voor_halte_lijst(
        self,
        haltesleutels,
        **kwargs
    ):
        """geef de real-time doorkomsten voor de opgegeven halte sleutels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_doorkomsten_voor_halte_lijst(haltesleutels, async_req=True)
        >>> result = thread.get()

        Args:
            haltesleutels (str): lijst van halte sleutels (bv 1_201302_5_5024541)

        Keyword Args:
            max_aantal_doorkomsten (int): Format - int32. maximaal aantal doorkomsten voor de opgegeven halte. [optional] if omitted the server will use the default value of 10
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            HalteDoorkomstenLijst
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['haltesleutels'] = \
            haltesleutels
        return self.geef_doorkomsten_voor_halte_lijst_endpoint.call_with_http_info(**kwargs)

    def geef_halte(
        self,
        entiteitnummer,
        haltenummer,
        **kwargs
    ):
        """geef een halte op basis van het opgegeven haltenummer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_halte(entiteitnummer, haltenummer, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32. nummer van de entiteit
            haltenummer (int): Format - int32. nummer van de entiteit

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Halte
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['haltenummer'] = \
            haltenummer
        return self.geef_halte_endpoint.call_with_http_info(**kwargs)

    def geef_halte_lijnrichtingen_lijst(
        self,
        haltesleutels,
        **kwargs
    ):
        """geef de lijnrichtingen die de opgegeven halte bedienen op basis van een lijst van halte sleutels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        #>>> thread = api.geef_halte_lijnrichtingen_lijst(haltesleutels, async_req=True)
        #>>> result = thread.get()

        Args:
            haltesleutels (str): lijst van halte sleutels (bv 1_201302_5_5024541)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Lijnrichtingen
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['haltesleutels'] = \
            haltesleutels
        return self.geef_halte_lijnrichtingen_lijst_endpoint.call_with_http_info(**kwargs)

    def geef_halte_lijst(
        self,
        haltesleutels,
        **kwargs
    ):
        """geef een lijst van haltes op basis van een lijst van halte sleutels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_halte_lijst(haltesleutels, async_req=True)
        >>> result = thread.get()

        Args:
            haltesleutels (str): lijst van halte sleutels (bv 1_201302_5_5024541)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Haltes
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['haltesleutels'] = \
            haltesleutels
        return self.geef_halte_lijst_endpoint.call_with_http_info(**kwargs)

    def geef_haltes(
        self,
        **kwargs
    ):
        """geef alle haltes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_haltes(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Haltes
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.geef_haltes_endpoint.call_with_http_info(**kwargs)

    def geef_haltes_indebuurt(
        self,
        latlng,
        **kwargs
    ):
        """geef de haltes van de verschillende vervoersmaatschappijen in de buurt van de opgegeven coordinaten  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_haltes_indebuurt(latlng, async_req=True)
        >>> result = thread.get()

        Args:
            latlng (str): latitude en longitude gescheiden door komma bv, 51.056064,3.797336

        Keyword Args:
            radius (int): Format - int32. de radius in meters binnen de welke naar haltes gezocht wordt. [optional] if omitted the server will use the default value of 750
            max_aantal_haltes (int): Format - int32. het maximaal aantal haltes die van de operatie verwacht wordt. [optional] if omitted the server will use the default value of 999
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Punten
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['latlng'] = \
            latlng
        return self.geef_haltes_indebuurt_endpoint.call_with_http_info(**kwargs)

    def geef_lijnrichtingen_voor_halte(
        self,
        entiteitnummer,
        haltenummer,
        **kwargs
    ):
        """geef de lijnrichtingen die de opgegeven halte bedienen  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_lijnrichtingen_voor_halte(entiteitnummer, haltenummer, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32. nummer van de entiteit
            haltenummer (int): Format - int32. nummer van de halte

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Lijnrichtingen
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['haltenummer'] = \
            haltenummer
        return self.geef_lijnrichtingen_voor_halte_endpoint.call_with_http_info(**kwargs)

    def geef_omleidingen_voor_halte(
        self,
        entiteitnummer,
        haltenummer,
        **kwargs
    ):
        """geef de omleidingen voor de opgegeven halte  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_omleidingen_voor_halte(entiteitnummer, haltenummer, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32. nummer van de entiteit
            haltenummer (int): Format - int32. nummer van de halte

        Keyword Args:
            datum (str): datum in formaat yyyy-MM-dd met als default waarde de huidige datum. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Omleidingen
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['haltenummer'] = \
            haltenummer
        return self.geef_omleidingen_voor_halte_endpoint.call_with_http_info(**kwargs)

    def geef_omleidingen_voor_halte_lijst(
        self,
        haltesleutels,
        **kwargs
    ):
        """geef de omleidingen voor de opgegeven halte sleutels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_omleidingen_voor_halte_lijst(haltesleutels, async_req=True)
        >>> result = thread.get()

        Args:
            haltesleutels (str): lijst van halte sleutels (bv 1_201302_5_5024541)

        Keyword Args:
            datum (str): datum in formaat yyyy-MM-dd met als default waarde de huidige datum. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            HalteOmleidingenLijst
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['haltesleutels'] = \
            haltesleutels
        return self.geef_omleidingen_voor_halte_lijst_endpoint.call_with_http_info(**kwargs)

    def geef_storingen_voor_halte(
        self,
        entiteitnummer,
        haltenummer,
        **kwargs
    ):
        """geef de storingen voor de opgegeven halte  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_storingen_voor_halte(entiteitnummer, haltenummer, async_req=True)
        >>> result = thread.get()

        Args:
            entiteitnummer (int): Format - int32. nummer van de entiteit
            haltenummer (int): Format - int32. nummer van de halte

        Keyword Args:
            datum (str): datum in formaat yyyy-MM-dd met als default waarde de huidige datum. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Omleidingen
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entiteitnummer'] = \
            entiteitnummer
        kwargs['haltenummer'] = \
            haltenummer
        return self.geef_storingen_voor_halte_endpoint.call_with_http_info(**kwargs)

    def geef_storingen_voor_halte_lijst(
        self,
        haltesleutels,
        **kwargs
    ):
        """geef de storingen de opgegeven halte sleutels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_storingen_voor_halte_lijst(haltesleutels, async_req=True)
        >>> result = thread.get()

        Args:
            haltesleutels (str): lijst van halte sleutels (bv 1_201302_5_5024541)

        Keyword Args:
            datum (str): datum in formaat yyyy-MM-dd met als default waarde de huidige datum. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Omleidingen
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['haltesleutels'] = \
            haltesleutels
        return self.geef_storingen_voor_halte_lijst_endpoint.call_with_http_info(**kwargs)

