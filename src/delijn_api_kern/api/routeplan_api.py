"""
    De Lijn Kern Open Data Services (v1)

    Dit document beschrijft de kern operaties van de Open Data API (v1)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from delijn_api_kern.api_client import ApiClient, Endpoint as _Endpoint
from delijn_api_kern.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from delijn_api_kern.model.routeplan import Routeplan


class RouteplanApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.geef_routeplan_endpoint = _Endpoint(
            settings={
                'response_type': (Routeplan,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/routeplan/{vertrekLatlng}/{bestemmingLatlng}',
                'operation_id': 'geef_routeplan',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'vertrek_latlng',
                    'bestemming_latlng',
                    'aanvraag_type',
                    'tijdstip',
                    'vertrek_aankomst',
                    'vervoers_optie',
                ],
                'required': [
                    'vertrek_latlng',
                    'bestemming_latlng',
                ],
                'nullable': [
                ],
                'enum': [
                    'aanvraag_type',
                    'vertrek_aankomst',
                    'vervoers_optie',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('aanvraag_type',): {

                        "INITIEEL": "INITIEEL",
                        "VROEGER": "VROEGER",
                        "LATER": "LATER",
                        "LAATSTE": "LAATSTE"
                    },
                    ('vertrek_aankomst',): {

                        "VERTREK": "VERTREK",
                        "AANKOMST": "AANKOMST"
                    },
                    ('vervoers_optie',): {

                        "BUS": "BUS",
                        "TRAM": "TRAM",
                        "METRO": "METRO",
                        "TREIN": "TREIN",
                        "BELBUS": "BELBUS"
                    },
                },
                'openapi_types': {
                    'vertrek_latlng':
                        (str,),
                    'bestemming_latlng':
                        (str,),
                    'aanvraag_type':
                        (str,),
                    'tijdstip':
                        (str,),
                    'vertrek_aankomst':
                        (str,),
                    'vervoers_optie':
                        ([str],),
                },
                'attribute_map': {
                    'vertrek_latlng': 'vertrekLatlng',
                    'bestemming_latlng': 'bestemmingLatlng',
                    'aanvraag_type': 'aanvraagType',
                    'tijdstip': 'tijdstip',
                    'vertrek_aankomst': 'vertrekAankomst',
                    'vervoers_optie': 'vervoersOptie',
                },
                'location_map': {
                    'vertrek_latlng': 'path',
                    'bestemming_latlng': 'path',
                    'aanvraag_type': 'query',
                    'tijdstip': 'query',
                    'vertrek_aankomst': 'query',
                    'vervoers_optie': 'query',
                },
                'collection_format_map': {
                    'vervoers_optie': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def geef_routeplan(
        self,
        vertrek_latlng,
        bestemming_latlng,
        **kwargs
    ):
        """geef een initëel, vroeger, later of laatste routeplan   # noqa: E501

        voor een vroeger routeplan dient de parameter tijdstip overeen te komen met het aankomsttijdsip (duurtijd.einde) van de vroegste reisweg, voor een later routeplan dient de parameter tijdstip overeen te komen het het vertrektijdstip (duurtijd.start) van de laatste reisweg  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_routeplan(vertrek_latlng, bestemming_latlng, async_req=True)
        >>> result = thread.get()

        Args:
            vertrek_latlng (str): latitude en longitude van de vertrek locatie gescheiden door komma bv, 51.056064,3.797336
            bestemming_latlng (str): latitude en longitude van de aankomst locatie gescheiden door komma bv, 51.056064,3.797336

        Keyword Args:
            aanvraag_type (str): bepaalt of de aanvraag gaat over een initiële, vroegere, latere of laatste routeplan. [optional] if omitted the server will use the default value of "INITIEEL"
            tijdstip (str): tijdstip van vertrekken of aankomen in formaat yyyy-MM-dd'T'HH:mm:ss bv. 2016-11-11T22:00:00. [optional]
            vertrek_aankomst (str): verwijst het tijdstip naar het moment van vertrek of aankomst. [optional] if omitted the server will use the default value of "VERTREK"
            vervoers_optie ([str]): Lijst van vervoersopties met als default BUS,TRAM,METRO en TREIN. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Routeplan
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['vertrek_latlng'] = \
            vertrek_latlng
        kwargs['bestemming_latlng'] = \
            bestemming_latlng
        return self.geef_routeplan_endpoint.call_with_http_info(**kwargs)

