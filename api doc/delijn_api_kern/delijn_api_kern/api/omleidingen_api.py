"""
    De Lijn Kern Open Data Services (v1)

    Dit document beschrijft de kern operaties van de Open Data API (v1)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from delijn_api_kern.api_client import ApiClient, Endpoint as _Endpoint
from delijn_api_kern.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from delijn_api_kern.model.omleiding import Omleiding
from delijn_api_kern.model.omleidingen import Omleidingen


class OmleidingenApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.geef_omleiding_endpoint = _Endpoint(
            settings={
                'response_type': (Omleiding,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/omleidingen/{referentieOmleiding}',
                'operation_id': 'geef_omleiding',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'referentie_omleiding',
                    'taal_code',
                ],
                'required': [
                    'referentie_omleiding',
                ],
                'nullable': [
                ],
                'enum': [
                    'taal_code',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('taal_code',): {

                        "NEDERLANDS": "NEDERLANDS",
                        "DUITS": "DUITS",
                        "FRANS": "FRANS",
                        "ENGELS": "ENGELS"
                    },
                },
                'openapi_types': {
                    'referentie_omleiding':
                        (int,),
                    'taal_code':
                        (str,),
                },
                'attribute_map': {
                    'referentie_omleiding': 'referentieOmleiding',
                    'taal_code': 'taalCode',
                },
                'location_map': {
                    'referentie_omleiding': 'path',
                    'taal_code': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geef_omleidingen_endpoint = _Endpoint(
            settings={
                'response_type': (Omleidingen,),
                'auth': [
                    'apiKeyHeader',
                    'apiKeyQuery'
                ],
                'endpoint_path': '/omleidingen',
                'operation_id': 'geef_omleidingen',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_datum',
                    'eind_datum',
                    'taal_code',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'taal_code',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('taal_code',): {

                        "NEDERLANDS": "NEDERLANDS",
                        "DUITS": "DUITS",
                        "FRANS": "FRANS",
                        "ENGELS": "ENGELS"
                    },
                },
                'openapi_types': {
                    'start_datum':
                        (str,),
                    'eind_datum':
                        (str,),
                    'taal_code':
                        (str,),
                },
                'attribute_map': {
                    'start_datum': 'startDatum',
                    'eind_datum': 'eindDatum',
                    'taal_code': 'taalCode',
                },
                'location_map': {
                    'start_datum': 'query',
                    'eind_datum': 'query',
                    'taal_code': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def geef_omleiding(
        self,
        referentie_omleiding,
        **kwargs
    ):
        """geef de omleiding op basis van zijn referentie id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_omleiding(referentie_omleiding, async_req=True)
        >>> result = thread.get()

        Args:
            referentie_omleiding (int): Format - int32. referentie id van de omleiding

        Keyword Args:
            taal_code (str): de taalcode voor de titel en omschrijving van de omleidingen. [optional] if omitted the server will use the default value of "NEDERLANDS"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Omleiding
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['referentie_omleiding'] = \
            referentie_omleiding
        return self.geef_omleiding_endpoint.call_with_http_info(**kwargs)

    def geef_omleidingen(
        self,
        **kwargs
    ):
        """geef alle omleidingen voor een periode van hoogstens een maand  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geef_omleidingen(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            start_datum (str): tijdstip in formaat yyyy-MM-dd'T'HH:mm:ss als start moment voor de opzoeking van de omleidingen met als default waarde de huidige tijdstip. [optional]
            eind_datum (str): tijdstip in formaat yyyy-MM-dd'T'HH:mm:ss als eind moment voor de opzoeking van de omleidingen  met als default waarde de huidige tijdstip. [optional]
            taal_code (str): de taalcode voor de titel en omschrijving van de omleidingen. [optional] if omitted the server will use the default value of "NEDERLANDS"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Omleidingen
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.geef_omleidingen_endpoint.call_with_http_info(**kwargs)

